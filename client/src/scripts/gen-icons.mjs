import { readdir, writeFile } from 'node:fs/promises';
import { resolve } from 'node:path';

const ICON_DIR = resolve('src/assets/images/icons'); // 아이콘 SVG 폴더
const OUT_FILE = resolve(ICON_DIR, 'index.tsx'); // 자동 생성될 파일

const toPascal = (s) =>
  s
    .replace(/\.[^/.]+$/, '') // 확장자 제거
    .replace(/(^|[-_ ]+)([a-zA-Z0-9])/g, (_, __, c) => c.toUpperCase());

const header = `/* AUTO-GENERATED by scripts/gen-icons.mjs — DO NOT EDIT */
import * as React from "react";

/** 공통 props 타입 (원하면 strokeWidth/size 등 추가하세요) */
export type IconProps = React.SVGProps<SVGSVGElement>;

/** 내부에서 lazy import된 컴포넌트를 Suspense로 감싸는 헬퍼 */
function withSuspense<T extends React.ComponentType<any>>(LazyComp: T) {
  const Wrapped = (props: React.ComponentProps<T>) => (
    <React.Suspense fallback={null}>
      {/* @ts-expect-error: lazy component typing */}
      <LazyComp {...props} />
    </React.Suspense>
  );
  return Wrapped;
}
`;

async function main() {
  const files = (await readdir(ICON_DIR)).filter((f) => f.endsWith('.svg'));

  const importLines = [];
  const compLines = [];
  const exportNames = [];

  for (const file of files) {
    const base = file.replace(/\.svg$/, '');
    const name = toPascal(base); // dashboard.svg -> Dashboard
    const importName = `Lazy_${name}`;
    importLines.push(`const ${importName} = React.lazy(() => import("./${base}.svg?react"));`);
    compLines.push(`export const ${name}: React.FC<IconProps> = Object.assign(withSuspense(${importName}), { displayName: "${name}" });`);
    exportNames.push(name);
  }

  const content = header + importLines.join('\n') + '\n\n' + compLines.join('\n') + '\n';

  await writeFile(OUT_FILE, content, 'utf8');
  console.log(`Generated ${OUT_FILE} with ${exportNames.length} icons:\n - ${exportNames.join('\n - ')}`);
}

main().catch((e) => {
  console.error(e);
  process.exit(1);
});
