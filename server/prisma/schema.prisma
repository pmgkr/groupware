generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider          = "mysql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

model User {
  user_id                          String      @id @unique(map: "user_id_UNIQUE") @db.VarChar(100)
  team_id                          Int?        @unique(map: "team_id_UNIQUE")
  user_name                        String      @db.VarChar(100)
  user_name_en                     String      @db.VarChar(100)
  phone                            String?     @db.VarChar(20)
  address                          String?     @db.VarChar(255)
  birth_date                       DateTime?   @db.Date
  hire_date                        DateTime?   @db.Date
  job_role                         String?     @db.VarChar(100)
  user_level                       user_level  @default(staff)
  user_status                      user_status @default(active)
  emergency_phone                  String?     @db.VarChar(255)
  profile_image                    String?     @db.VarChar(255)
  branch                           String?     @default("Seoul,Korea") @db.VarChar(100)
  created_at                       DateTime    @default(now())
  updated_at                       DateTime    @default(now())
  schedule_schedule_team_idTousers Schedule[]  @relation("schedule_team_idTousers")
  schedule_schedule_user_idTousers Schedule[]  @relation("schedule_user_idTousers")

  @@map("users")
}

model Teams {
  team_id      Int     @id @default(autoincrement())
  parent_id    Int?
  team_name    String  @db.VarChar(100)
  level        Int     @default(1)
  order        Int?    @default(0)
  manager_id   String? @db.VarChar(100)
  manager_name String? @db.VarChar(100)

  @@map("teams")
}

model Schedule {
  id                            Int                         @id @default(autoincrement())
  seq                           Int?                        @unique(map: "seq_UNIQUE")
  user_id                       String                      @db.VarChar(100)
  user_name                     String?                     @db.VarChar(100)
  team_id                       Int
  sch_year                      Int?                        @db.Int
  sch_type                      schedule_sch_type
  sch_vacation_type             schedule_sch_vacation_type?
  sch_vacation_used             Decimal?                    @db.Decimal(4, 1)
  sch_event_type                schedule_sch_event_type?
  sch_sdate                     DateTime                    @db.Date
  sch_stime                     DateTime                    @db.Time(0)
  sch_edate                     DateTime                    @db.Date
  sch_etime                     DateTime                    @db.Time(0)
  sch_isAllday                  schedule_sch_isAllday
  sch_description               String?                     @db.Text
  sch_status                    schedule_sch_status
  sch_created_at                DateTime                    @default(now()) @db.Timestamp(0)
  sch_modified_at               DateTime?                   @db.Timestamp(0)
  google_calendar_idx           String?                     @db.VarChar(50)
  users_schedule_team_idTousers User                        @relation("schedule_team_idTousers", fields: [team_id], references: [team_id], onDelete: Cascade, map: "fk_schedule_team")
  users_schedule_user_idTousers User                        @relation("schedule_user_idTousers", fields: [user_id], references: [user_id], onDelete: Cascade, map: "fk_schedule_user")

  @@index([team_id], map: "fk_schedule_team")
  @@index([user_id], map: "fk_schedule_user")
  @@map("schedule")
}

model Login {
  login_seq Int    @id @default(autoincrement())
  user_id   String @unique(map: "Login_user_id_key") @db.VarChar(100)
  user_pw   String @db.VarChar(50)

  @@map("login")
}

enum user_level {
  staff
  manager
  admin
}

enum user_status {
  active
  inactive
  suspended
}

enum schedule_sch_type {
  vacation
  event
}

enum schedule_sch_vacation_type {
  day
  half
  quarter
}

enum schedule_sch_event_type {
  remote
  field
  etc
}

enum schedule_sch_isAllday {
  Y
  N
}

enum schedule_sch_isHoliday {
  Y
  N
}

enum schedule_sch_status {
  Y
  H
  N
}
